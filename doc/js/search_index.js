var search_data = {"index":{"searchIndex":["dsmga2","chromosome","fitness()","local_search()","new()","new()","run()","termination_criteria_meet()"],"longSearchIndex":["dsmga2","dsmga2::chromosome","dsmga2::chromosome#fitness()","dsmga2::chromosome#local_search()","dsmga2::new()","dsmga2::chromosome::new()","dsmga2#run()","dsmga2#termination_criteria_meet()"],"info":[["DSMGA2","","DSMGA2.html","","<p>The main class of the gem, whose algorithm intends to find a global optimal\nof a given function.\n"],["DSMGA2::Chromosome","","DSMGA2/Chromosome.html","",""],["fitness","DSMGA2::Chromosome","DSMGA2/Chromosome.html#method-i-fitness","()",""],["local_search","DSMGA2::Chromosome","DSMGA2/Chromosome.html#method-i-local_search","()",""],["new","DSMGA2","DSMGA2.html#method-c-new","(size_of_population = 27)","<p>Initialize the population with the given size.\n"],["new","DSMGA2::Chromosome","DSMGA2/Chromosome.html#method-c-new","()",""],["run","DSMGA2","DSMGA2.html#method-i-run","(pressure = 2, execute_round = 100)","<p>Return a DSMGA2::Chromosome with the greatest fitness.\n<p>pressure &mdash; The selection pressure for the tournament â€¦\n"],["termination_criteria_meet","DSMGA2","DSMGA2.html#method-i-termination_criteria_meet","()","<p>Return a boolean whether the termination criteria meet or not.\n"]]}}